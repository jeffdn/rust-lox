// var cache = {};
// var calls = {};

//fun __fib(n, a, b) {
//    if (n == 0) {
//        return a;
//    }
//
//    if (n == 1) {
//        return b;
//    }
//
//    return __fib(n - 1, b, a + b);
//}

fun _fib(n) {
    // if (n not in calls) {
    //     calls[n] = 0;
    // }

    // calls[n] = calls[n] + 1;

    if (n <= 1) {
        return n;
    } else {
        return _fib(n - 2) + _fib(n - 1);
    }
}

// fun fib(n) {
//     if (n in cache) {
//         return cache[n];
//     }
//
//     var answer = 0;
//
//     if (n <= 1) {
//         answer = n;
//     } else {
//         answer = fib(n - 2) + fib(n - 1);
//     }
//
//     cache[n] = answer;
//
//     return answer;
// }

print "running naive fibonacci sequence";

var start = time();

print _fib(30);

print "finished in " + (time() - start) + " seconds";

// print "running cached fibonacci sequence";
//
// var start = time();
//
// print fib(30);
//
// print "finished in " + (time() - start) + " seconds";
//
// print calls;
