// various test cases

// booleans
assert true;
assert !false;
assert !!true;


// numbers
assert 4 % 2 == 0;
assert 4 % 3 == 1;
assert 4 * 6 == 24;


// closures
var global_set;
var global_get;

fn main() {
  {
    var a = 0;

    fn set(x) { a = a + x; }
    fn get() { return a; }

    global_set = set;
    global_get = get;
  }
}

main();
assert global_get() == 0;
global_set(4);
assert global_get() == 4;
global_set(2);
assert global_get() == 6;


// lists
var list = [1, 2, 3];
assert list[-1] == 3;
assert len(list) == 3;

list = list + [4, 5];
assert list[-1] == 5;
assert len(list) == 5;

assert 8 not in list;
list[-2] = 8;
assert list == [1, 2, 3, 8, 5];
assert 8 in list;

assert list == list[:];


// strings
var string = "hello, world";
assert string[0:5] == "hello";


// maps
var map = {'a': 1, 'b': 2};
assert 'a' in map;
assert 'c' not in map;
assert map['b'] == 2;

map['c'] = 3;
assert 'c' in map;

delete map['c'];
assert 'c' not in map;


// classes
class Mammal {
  init(name) {
    this.name = name;
  }

  action() {
    return this.name + " snuggles";
  }
}

class Cat < Mammal {
  action() {
    return super.action() + " and purrs";
  }
}

var mammal = Mammal('Coco');
assert mammal.action() == 'Coco snuggles';

var cat = Cat('Coco');
assert cat.action() == 'Coco snuggles and purrs';


// loops
var new_list = [];
foreach (var i in range(0, 5)) {
  if (i == 2) {
    continue;
  }

  if (i == 4) {
    break;
  }

  new_list = new_list + [i * 2];
}

assert new_list == [0, 2, 6];

var new_list = [];
for (var i = 0; i < 5; i = i + 1) {
  if (i == 2) {
    continue;
  }

  if (i == 4) {
    break;
  }

  new_list = new_list + [i * 2];
}

assert new_list == [0, 2, 6];


// misc
assert range(1, 4) == [1, 2, 3];
assert str(4) == '4';
assert '4' == "4";
