// various test cases

// booleans
print "booleans...";
assert true;
assert !false;
assert !!true;
println colors.green(' ok');


// numbers
print "numbers...";
assert 4 % 2 == 0;
assert 4 % 3 == 1;
assert 4 * 6 == 24;
println colors.green(' ok');


// closures
print "closures...";
var global_set;
var global_get;

fn main() {
  {
    var a = 0;

    fn set(x) { a = a + x; }
    fn get() { return a; }

    global_set = set;
    global_get = get;
  }
}

main();
assert global_get() == 0;
global_set(4);
assert global_get() == 4;
global_set(2);
assert global_get() == 6;
main();
assert global_get() == 0;
println colors.green(' ok');


// lists
print "lists...";
var list = [1, 2, 3];
assert list[-1] == 3;
assert len(list) == 3;

list = list + [4, 5];
assert list[-1] == 5;
assert len(list) == 5;

assert 8 not in list;
list[-2] = 8;
assert list == [1, 2, 3, 8, 5];
assert 8 in list;

assert list == list[:];
println colors.green(' ok');


// strings
print "strings...";
var string = "hello, world";
assert string[0:5] == "hello";
println colors.green(' ok');


// maps
print "maps...";
var map = {'a': 1, 'b': 2};
assert 'a' in map;
assert 'c' not in map;
assert map['b'] == 2;

map['c'] = 3;
assert 'c' in map;

delete map['c'];
assert 'c' not in map;

delete map['a'];
assert map.keys() == ['b'], "keys() generates a list of keys";
assert map.values() == [2], "values() generates a list of values";
println colors.green(' ok');


// classes
print "classes...";
class Mammal {
  init(name) {
    this.name = name;
  }

  action() {
    return this.name + " snuggles";
  }
}

class Cat < Mammal {
  action() {
    return super.action() + " and purrs";
  }
}

var mammal = Mammal('Coco');
assert mammal.action() == 'Coco snuggles';

var cat = Cat('Coco');
assert cat.action() == 'Coco snuggles and purrs';
println colors.green(' ok');


// loops
print "loops...";
var new_list = [];
foreach (var i in range(0, 5)) {
  if (i == 2) {
    continue;
  }

  if (i == 4) {
    break;
  }

  new_list = new_list + [i * 2];
}

assert new_list == [0, 2, 6];

var new_list = [];
for (var i = 0; i < 5; i = i + 1) {
  if (i == 2) {
    continue;
  }

  if (i == 4) {
    break;
  }

  new_list = new_list + [i * 2];
}

assert new_list == [0, 2, 6];
println colors.green(' ok');


// misc
print "misc...";
assert range(1, 4) == [1, 2, 3];
assert str(4) == '4';
assert '4' == "4";
println colors.green(' ok');


// colors!
println colors.black('black!');
println colors.green('green!');
println colors.red('red!');
println colors.yellow('yellow!');
println colors.blue('blue!');
println colors.magenta('magenta!');
println colors.cyan('cyan!');
println colors.white('white!');
